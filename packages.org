* External packages customization

** Install
*** Yasnippet
    #+BEGIN_SRC emacs-lisp
      ;; Yasnippet
      (use-package yasnippet
	:ensure t
	:diminish yas-minor-mode
	:config
	(setq yas-snippet-dirs '("~/.emacs.d/snippets"))
	(yas-global-mode 1))
    #+END_SRC

*** insert-shebang
    #+BEGIN_SRC emacs-lisp
      ;; insert-shebang
      (use-package insert-shebang
	:ensure t
	:pin melpa-stable
	:config
	'(insert-shebang-file-types
	  (quote
	   (("py" . "python")
	    ("sh" . "bash")
	    ("pl" . "perl")
	    ("rb" . "ruby")))))
    #+END_SRC

*** autopair
    #+BEGIN_SRC emacs-lisp
      ;; autopair
      (use-package autopair
	:ensure t
	:defer 2  ; 2 seconds of delay
	:diminish autopair-minor-mode
	:config
	(autopair-global-mode t))
    #+END_SRC

*** Magit
    #+BEGIN_SRC emacs-lisp
      ;; Magit
      (use-package magit
	:ensure t
	:no-require t
	:diminish magit-minor-mode)
    #+END_SRC

*** Git time-machine
    #+BEGIN_SRC emacs-lisp
      ;; Git Time Machine
      (use-package git-timemachine
	:ensure t
	:defer 5
	:diminish git-timemachine-minor-mode)
    #+END_SRC

*** Company mode
    #+BEGIN_SRC emacs-lisp
      ;;; Company mode
      (use-package company
    	:ensure t
    	:config
    	(global-company-mode t))
    #+END_SRC

*** Auto Complete
    #+BEGIN_SRC emacs-lisp
      ;; auto-complete
      (use-package auto-complete
	:ensure t
	:diminish auto-complete-mode
	:init
	(setq ac-quick-help-delay 0.1)
	:config
	(ac-config-default))
    #+END_SRC

*** Python
    #+BEGIN_SRC emacs-lisp
      ;; Python mode
      (use-package python
    	:mode ("\\.py\\'" . python-mode)
    	:interpreter ("python3.6" . python-mode))
    #+END_SRC

**** Python Jedi
     #+BEGIN_SRC emacs-lisp
       ;;; Python Jedi
       ;; From emacs-jedi readme
       ;; Type:
       ;;     M-x jedi:install-server RET
       ;; Then open Python file.
       (use-package jedi
	 :ensure t
	 :init
	 ;; Standard Jedi.el setting
	 (add-hook 'python-mode-hook 'jedi:setup)
	 (add-hook 'python-mode-hook 'jedi:ac-setup)
	 (setq jedi:complete-on-dot t))
     #+END_SRC

**** Company Jedi
     #+BEGIN_SRC emacs-lisp
       ;; company-jedi
       ;; Need to install jedi server
       ;; M-x jedi:install-server RET
       (use-package company-jedi
	 :ensure t
	 :config
	 (defun psachin/python-mode-hook ()
	   (add-to-list 'company-backends 'company-jedi))
	 (add-hook 'python-mode-hook 'psachin/python-mode-hook))
     #+END_SRC

**** Flycheck
     #+BEGIN_SRC emacs-lisp
       ;; Flycheck
       (use-package flycheck
	 :ensure t
	 :diminish flycheck-mode
	 :config
	 (global-flycheck-mode t))
     #+END_SRC

*** Elpy
    - Notes:
      - To activate python virtualenv: =M-x pyvenv-activate=
      - To Configure elpy: =M-x elpy-config=
      - Ref: https://realpython.com/blog/python/emacs-the-best-python-editor/

    Code
    #+BEGIN_SRC emacs-lisp
      ;; Elpy
      (use-package elpy
	:disabled
	:ensure t
	:diminish elpy-mode
	:init
	(setq
	 ;; Referred from:
	 ;; https://github.com/ajschumacher/.emacs.d/blob/master/init.el
	 ;; sudo dnf install python-jedi python3-jedi -y
	 elpy-rpc-backend "jedi"
	 help-at-pt-timer-delay 0.9
	 help-at-pt-display-when-idle t
	 tab-width 4)

	:config
	(elpy-enable)
	;; Don't use flymake if flycheck is available
	(when (require 'flycheck nil t)
	  (setq elpy-module (delq 'elpy-module-flymake elpy-modules)))

	;; Enable flycheck and pep8
	(add-hook 'elpy-mode-hook 'flycheck-mode)

	;;; Following gives problem when python code used in reveal.js
	;;; presentation.
	;; (add-hook 'elpy-mode-hook 'py-autopep8-enable-on-save)

	;; Do not highlight indentation
	(delete 'elpy-module-highlight-indentation elpy-modules)

	;; I use this keys for window (re)size
	(eval-after-load "elpy"
	  '(cl-dolist (key '("C-<up>" "C-<down>" "C-<left>" "C-<right>"))
	     (define-key elpy-mode-map (kbd key) nil))))
    #+END_SRC

*** Undo tree
    #+BEGIN_SRC emacs-lisp
      ;; Undo tree
      (use-package undo-tree
	:ensure t)
    #+END_SRC

*** Ruby(on Rails)
**** flymake-ruby
     #+BEGIN_SRC emacs-lisp
       ;; flymake-ruby
       (use-package flymake-ruby
	 :ensure t
	 :init
	 (setq ruby-deep-indent-paren nil)
	 :config
	 (add-hook 'ruby-mode-hook 'flymake-ruby-load))
     #+END_SRC

**** robe
     #+BEGIN_SRC emacs-lisp
       (use-package robe
     	:ensure t
     	:config
     	(add-hook 'ruby-mode-hook 'robe-mode)
     	(push 'company-robe company-backends))
     #+END_SRC

*** Markdown
    #+BEGIN_SRC emacs-lisp
      ;; markdown-mode
      (use-package markdown-mode
	:ensure t
	:commands (markdown-mode gfm-mode)
	:mode (("README\\.md\\'" . gfm-mode)
	       ("ReadMe\\.md\\'" . gfm-mode)
	       ("\\.md\\'" . markdown-mode)
	       ("\\.markdown\\'" . markdown-mode))
	:init (setq markdown-command "multimarkdown"))
    #+END_SRC

*** Presentation
**** reveal.js
     #+BEGIN_SRC emacs-lisp
       ;; ox-reveal
       ;; Usage
       ;; 1. Create .org file with following content
       ;; #+OPTIONS: num:nil toc:nil
       ;; #+REVEAL_TRANS: linear
       ;; #+REVEAL_THEME: league
       ;; #+Title: GNU/Emacs
       ;; #+Author: Sachin
       ;; #+Email: @psachin
       ;;
       ;; 2. Compile using: C-c C-e R R
       (use-package ox-reveal
	 :ensure t
	 :pin melpa
	 :init
	 ;; External URL
	 (setq org-reveal-root "http://cdn.jsdelivr.net/reveal.js/3.0.0/")
	 ;; Local URL
	 ;; (setq org-reveal-root "file:///home/psachin/github/reveal.js/")
	 (setq org-reveal-mathjax t))

       ;; htmlize
       (use-package htmlize
	 :after (ox-reveal)
	 :ensure t)
     #+END_SRC

**** org-tree-slide
     #+BEGIN_SRC emacs-lisp
       ;; Notes:
       ;; 1. Goto org file
       ;; 2. Enable org-tree-slide-mode
       ;; 3. Keys: C->, C-<
       (use-package org-tree-slide
	 :ensure t
	 :init
	 (when (require 'org-tree-slide nil t)
	   (org-tree-slide-presentation-profile)))
     #+END_SRC

*** Multiple-cursor
    #+BEGIN_SRC emacs-lisp
      ;; Multiple cursors
      (use-package multiple-cursors
	:ensure t)
    #+END_SRC

*** IRC
**** Weechat config
     #+BEGIN_SRC emacs-lisp
       ;; Load weechat.el
       ;; Need to setup relay server:
       ;; https://www.weechat.org/files/doc/stable/weechat_user.en.html#relay_weechat_protocol
       ;; Default args:
       ;; - host: localhost
       ;; - port: 9000
       ;; - mode: plain
       ;; - password: mypassword
       ;;; Code:
       (use-package weechat
	 :disabled
	 :defer 3
	 :ensure t
	 :config
	 (setq completion-ignore-case t)
	 (unless (weechat-relay-connected-p)
	   (ignore-errors
	     (weechat-connect weechat-host-default weechat-port-default "mypassword" 'plain))))
     #+END_SRC

** Manual
*** [[https://github.com/jekor/hidepw][hidepw]]: Emacs minor mode for hiding passwords(anti-shoulder-surfing)
    #+BEGIN_SRC emacs-lisp
      ;; hidepw
      ;; Need to update submodule.
      ;; cd ~/.emacs.d
      ;; git submodule init
      ;; git submodule update
      (use-package hidepw
    	:load-path "extensions/hidepw/"
    	:config
    	(ignore-errors (require 'hidepw))
    	(add-to-list 'auto-mode-alist
    				 '("\\.gpg\\'" . (lambda () (hidepw-mode)))))
    #+END_SRC
