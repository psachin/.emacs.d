* External packages customization

** Install
   - Yasnippet
     #+BEGIN_SRC emacs-lisp
       ;; Yasnippet
       (use-package yasnippet
         :ensure t
         :diminish yas-minor-mode
         :config
         (setq yas-snippet-dirs (concat user-emacs-directory "snippets"))
         (yas-global-mode))
     #+END_SRC

   - insert-shebang
     #+BEGIN_SRC emacs-lisp
       ;; insert-shebang
       (use-package insert-shebang
         :ensure t
         :pin melpa-stable
         :config
         '(insert-shebang-file-types
           (quote
           (("py" . "python")
            ("sh" . "bash")
            ("pl" . "perl")
            ("rb" . "ruby")))))
     #+END_SRC

   - autopair
     #+BEGIN_SRC emacs-lisp
       ;; autopair
       (use-package autopair
         :ensure t
         :defer 2                              ; 2 seconds of delay
         :diminish autopair-minor-mode
         :config
         (autopair-global-mode t))
     #+END_SRC

   - Magit
     #+BEGIN_SRC emacs-lisp
       ;; Magit
       (use-package magit
         :ensure t
         :no-require t
         :diminish magit-minor-mode)
     #+END_SRC

   - Git time-machine
     #+BEGIN_SRC emacs-lisp
       ;; Git Time Machine
       (use-package git-timemachine
         :ensure t
         :defer 5
         :diminish git-timemachine-minor-mode)
     #+END_SRC

   - Company mode
     #+BEGIN_SRC emacs-lisp
       ;;; Company mode
       (use-package company
	 :ensure t
	 :config
	 (global-company-mode t))
     #+END_SRC

   - Auto Complete
     #+BEGIN_SRC emacs-lisp
       ;; auto-complete
       (use-package auto-complete
         :ensure t
         :config
         (ac-config-default))
     #+END_SRC

   - Auto complete ispell
     #+BEGIN_SRC emacs-lisp
       ;; ac-ispell
       (use-package ac-ispell
         :ensure t
         :diminish ac-ispell-mode
         :config
         (custom-set-variables
          '(ac-ispell-requires 4)
          '(ac-ispell-fuzzy-limit 4))

         (eval-after-load "auto-complete"
           '(progn
              (ac-ispell-setup))))
     #+END_SRC

   - Python
     #+BEGIN_SRC emacs-lisp
       ;; Python mode
       (use-package python
         :mode ("\\.py\\'" . python-mode)
         :interpreter ("python3.4" . python-mode))
     #+END_SRC

   - Python Jedi

     From emacs-jedi readme
     #+BEGIN_SRC sh
       M-x jedi:install-server RET
     #+END_SRC

     Then open Python file.
     #+BEGIN_SRC emacs-lisp
       ;;; Python Jedi
       ;;; From emacs-jedi readme
       ;; Type:
       ;;     M-x jedi:install-server RET
       ;; Then open Python file.
       (use-package jedi
         :ensure t
         :disabled t
         :defer 3
         :config
         ;; Standard Jedi.el setting
         (add-hook 'python-mode-hook 'jedi:setup)
         (setq jedi:complete-on-dot t))
     #+END_SRC

   - Company Jedi
     #+BEGIN_SRC emacs-lisp
       ;; company-jedi
       ;; Need to install jedi server
       ;; M-x jedi:install-server RET
       (use-package company-jedi
         :ensure t
         :disabled t
         :config
         (defun my/python-mode-hook ()
           (add-to-list 'company-backends 'company-jedi))

         (add-hook 'python-mode-hook 'my/python-mode-hook))
     #+END_SRC

   - Flycheck
     #+BEGIN_SRC emacs-lisp
       ;; Flycheck
       (use-package flycheck
         :ensure t
         :config
         (global-flycheck-mode t))
     #+END_SRC

   - Elpy
     #+BEGIN_SRC emacs-lisp
       ;; Elpy
       (use-package elpy
         :ensure t
         :config
         (elpy-enable)
         ;; Don't use flymake if flycheck is available
         (when (require 'flycheck nil t)
           (setq elpy-module
                 (delq 'elpy-module-flymake elpy-modules)))
         ;; Enable flycheck and pep8
         (add-hook 'elpy-mode-hook 'flycheck-mode)

         ;; Following gives problem when python code used in reveal.js
         ;; presentation.
         ;; (add-hook 'elpy-mode-hook 'py-autopep8-enable-on-save)

         ;; Shamlessly copied from
         ;; https://github.com/ajschumacher/.emacs.d/blob/master/init.el
         (custom-set-variables
          ;; sudo dnf install python-jedi python3-jedi -y
          '(elpy-rpc-backend "jedi")
          '(help-at-pt-display-when-idle (quote (flymake-overlay)) nil (help-at-pt))
          '(help-at-pt-timer-delay 0.9)
          '(tab-width 4))

         ;; Do not highlight indentation
         (delete 'elpy-module-highlight-indentation elpy-modules)

         ;; I use this keys for window (re)size
         (eval-after-load "elpy"
         '(cl-dolist (key '("C-<up>" "C-<down>" "C-<left>" "C-<right>"))
            (define-key elpy-mode-map (kbd key) nil))))
     #+END_SRC

   - Undo tree
     #+BEGIN_SRC emacs-lisp
       ;; Undo tree
       (use-package undo-tree
         :ensure t)
     #+END_SRC

   - Ruby(on Rails)
     - =flymake-ruby=
       #+BEGIN_SRC emacs-lisp
         ;; flymake-ruby
         (use-package flymake-ruby
           :ensure t
           :config
           (add-hook 'ruby-mode-hook 'flymake-ruby-load)
           (setq ruby-deep-indent-paren nil))
       #+END_SRC

     - =robe=
       #+BEGIN_SRC emacs-lisp
         (use-package robe
           :ensure t
           :config
           (add-hook 'ruby-mode-hook 'robe-mode)
           (push 'company-robe company-backends))
       #+END_SRC

   - Presentation
	 - reveal.js
       #+BEGIN_SRC emacs-lisp
         ;; ox-reveal
         (use-package ox-reveal
           :ensure ox-reveal)

         (setq org-reveal-root "http://cdn.jsdelivr.net/reveal.js/3.0.0/")
         (setq org-reveal-mathjax t)

         ;; htmlize
         (use-package htmlize
           :ensure t)
       #+END_SRC

** Manual
   - [[https://github.com/jekor/hidepw][hidepw]]: Emacs minor mode for hiding passwords (anti-shoulder-surfing)
     #+BEGIN_SRC emacs-lisp
       ;; hidepw
       ;; Need to update submodule.
       ;; cd ~/.emacs.d
       ;; git submodule init
       ;; git submodule update
       (use-package hidepw
         :load-path "extensions/hidepw/"
         :config
         (ignore-errors (require 'hidepw))
         (add-to-list 'auto-mode-alist
                      '("\\.gpg\\'" . (lambda () (hidepw-mode)))))
     #+END_SRC
