* Emacs configuration

** Usage
   - Clone this repo(/Warning/: Backup existing =~/.emacs.d/=)
     #+BEGIN_SRC sh
       git clone http://github.com/psachin/.emacs.d.git -b config.org ~/.emacs.d
     #+END_SRC

   - Update submodules. This will enable =hidepw=.
     #+BEGIN_SRC sh
       cd ~/.emacs.d
       git submodule init
       git submodule update
     #+END_SRC

   - Start Emacs

** Contribute
   - Feel free to send PRs
   - Create new issues

** Gnus
   - Optionally you can edit parameter in =gnus.el= and copy the file as =~/.gnus.el=

** Minimal config

   Change user name and Email
   #+BEGIN_SRC emacs-lisp
   ;; Load my details
   (setq user-full-name "Sachin"
	 user-mail-address "psachin@redhat.com")
   #+END_SRC

   Do not mess up =init.el=
   #+BEGIN_SRC emacs-lisp
   ;; Me: Emacs..
   ;; Emacs: Yes Master?
   ;; Me: Put your customization inside custom.el. I don't want init.el to be messed up by you.
   ;; Emacs: As you wish Master.
   (setq custom-file (expand-file-name "custom.el" user-emacs-directory))
   (when (file-exists-p custom-file)
     (load custom-file))
   #+END_SRC

   Turn of all decorations
   #+BEGIN_SRC emacs-lisp
     ;; Turn off windows decoration
     (when window-system
       (tool-bar-mode 0)
       (menu-bar-mode 0)
       (scroll-all-mode 0)
       (scroll-bar-mode 0)
       (tooltip-mode 0))
     ;; Turn off during no-window
     (menu-bar-mode 0)
   #+END_SRC

   Turn on the theme
   #+BEGIN_SRC emacs-lisp
     ;; Load in-built dark theme
     (load-theme 'tango-dark)
   #+END_SRC

   I want you to greet me, Emacs!
   #+BEGIN_SRC emacs-lisp
     ;; Greeting from Emacs
     (setq-default inhibit-startup-screen t
                   initial-scratch-message ";; Welcome Master

     "
                   inhibit-splash-screen t)
   #+END_SRC

** General configuration
   - Set visible bell
     #+BEGIN_SRC emacs-lisp
       ;; Set visible bell
       (setq visible-bell t)
     #+END_SRC

   - Show matching parenthesis
     #+BEGIN_SRC emacs-lisp
       ;; Show matching parenthesis
       (show-paren-mode t)
       (setq-default show-paren-style 'parenthesis) ; highlight just brackets
       ;; (setq show-paren-style 'expression) ; highlight bracket expression
     #+END_SRC

   - Elisp function docs
     #+BEGIN_SRC emacs-lisp
       ;; Show elisp function docs in result bar
       (add-hook 'emacs-lisp-mode-hook 'turn-on-eldoc-mode)
       (add-hook 'lisp-interaction-mode-hook 'turn-on-eldoc-mode)
       (add-hook 'ielm-mode-hook 'turn-on-eldoc-mode)
     #+END_SRC

   - Minor mode tweaks
     #+BEGIN_SRC emacs-lisp
       ;;; Minor mode tweaks
       ;; Enable column-number mode
       (column-number-mode t)

       (ignore-errors (display-battery-mode t))
       (display-time-mode t)
       (size-indication-mode t)

       ;; Show funtion name in a mode line
       (which-function-mode t)
     #+END_SRC

   - Editing
     #+BEGIN_SRC emacs-lisp
       ;;; Editing
       ;; Delete selected text while typing
       (delete-selection-mode t)

       ;; Turn on word wrap
       (add-hook 'text-mode-hook '(lambda ()
                                    (auto-fill-mode t)))

       ;; Enable subword for all programing modes
       (add-hook 'prog-mode-hook 'subword-mode)

       ;; Enable pretty syntax highlighting everywhere
       (global-font-lock-mode t)

       ;; Wrap lines automatically
       (auto-fill-mode t)

       ;; Indicate empty line
       (setq-default indicate-empty-lines t)
       (setq-default show-trailing-whitespace t)

       ;; Expand some words and auto-correct
       (setq save-abbrevs 'silently)
       (setq-default abbrev-mode t)
     #+END_SRC

   - Dired
     #+BEGIN_SRC emacs-lisp
       ;;; Dired
       ;; Hide DOT files with M-o
       (require 'dired-x)
       (setq dired-omit-files "^\\...+$")

       (add-hook 'dired-mode-hook
                 (lambda ()
                   ;; Set dired-x buffer-local variables here.  For example:
                   (dired-omit-mode 1)
                   ))

       ;; Auto complete with ignore case
       (setq-default read-buffer-completion-ignore-case t)
       (setq-default read-file-name-completion-ignore-case t)

       ;; Save all backup files in user space
       (setq backup-directory-alist '((".*" . "~/.emacs.d/emacs-saves")))
     #+END_SRC

   - File
     #+BEGIN_SRC emacs-lisp
       ;;; File
       ;; File encoding
       (prefer-coding-system 'utf-8)
       (setq-default buffer-file-coding-system 'utf-8-auto-unix)

       ;; limit to 80 chars
       ;; TODO: to apply only code other than java.core
       (require 'whitespace)
       (setq whitespace-line-column 80) ;; limit line length
       (setq whitespace-style '(face lines-tail))
       (add-hook 'prog-mode-hook 'whitespace-mode)
       (global-whitespace-mode +1)
     #+END_SRC

   - Org-mode
     #+BEGIN_SRC emacs-lisp
       ;; Add workflow state in org-mode
       (setq-default org-todo-keywords
                     '((sequence "TODO" "FIXME" "IN-PROGRESS" "WAITING" "DONE")))

       ;; This will create a date-time stamp for tasks marked as 'DONE'.
       (setq-default org-log-done t)

       ;; Org babel languages
       (org-babel-do-load-languages
        'org-babel-load-languages
        '((python . t)
          (C . t)
          (calc . t)
          (latex . t)
          (java . t)
          (ruby . t)
          (lisp . t)
          (scheme . t)
          (sh . t)
          (sqlite . t)
          (js . t)))
     #+END_SRC

   - Misc
     #+BEGIN_SRC emacs-lisp
       ;;; Misc
       ;; Save history
       (savehist-mode 1)

       ;; Lazy prompting. Change "yes or no" to "y or n"
       ;; http://dl.dropboxusercontent.com/u/3968124/sacha-emacs.html
       (fset 'yes-or-no-p 'y-or-n-p)

       ;; Make TAB key always call a indent command
       (setq-default tab-always-indent t)

       ;; Make TAB key do indent first and then completion
       (setq-default tab-always-indent 'complete)

       ;; Fill a line with space after a period
       (setq sentence-end-double-space nil)

       ;; Modes for certain file extensions
       ;; add C++ mode for .ino files(Arduino files)
       (add-to-list 'auto-mode-alist
                    '("\\.ino\\.pde\\'" . c++-mode)
                    '("\\.h\\'" . c++-mode))

       ;; Enable Allman Style of indentation for C code. OpenSource for you, Jan 2014.
       (setq-default c-default-style "linux"
                     c-basic-offset 4)


       ;; hide DOT files with M-o
       (require 'dired-x)
       (setq dired-omit-files "^\\...+$")

       (add-hook 'dired-mode-hook
                 (lambda ()
                   ;; Set dired-x buffer-local variables here.  For example:
                   (dired-omit-mode 1)))
     #+END_SRC

   - Start Emacs server
     #+BEGIN_SRC emacs-lisp
       ;; Start Emacs server
       (require 'server)
       (unless (server-running-p)
	 (server-start))
     #+END_SRC

** [[./latex.org][LaTeX]]
   I want to have special section for LaTeX
   #+BEGIN_SRC emacs-lisp
     ;;; Load latex.el
     (org-babel-load-file (concat user-emacs-directory "latex.org"))
   #+END_SRC

** [[./alias.org][Alias]]
   #+BEGIN_SRC emacs-lisp
     ;;; Load aliases.el
     (org-babel-load-file (concat user-emacs-directory "alias.org"))
   #+END_SRC

** [[./packages.org][Packages]]
   #+BEGIN_SRC emacs-lisp
     ;;; Load packages.el
     (org-babel-load-file (concat user-emacs-directory "packages.org"))
   #+END_SRC

** [[./keyboard.org][Keyboard config]]
   #+BEGIN_SRC emacs-lisp
     ;;; Load keyboard.el
     (org-babel-load-file (concat user-emacs-directory "keyboard.org"))
   #+END_SRC

** [[./custom_functions.org][Custom Functions]]
   All my custom functions
   #+BEGIN_SRC emacs-lisp
     ;;; Load custom_functions.el
     (org-babel-load-file (concat user-emacs-directory "custom_functions.org"))
   #+END_SRC
